<!-- ## Technical Environment ‚òÅÔ∏è

- [**Cloud-native architecture**]{.orange} on the [**SSPCloud**]{.blue2} platform ‚òÅÔ∏è
- [**Modern tech stack**]{.orange}: Kubernetes, Docker, MLFlow, React üîß
- [**Automated workflows**]{.orange} ensuring [**reproducibility**]{.blue2} üîÑ
- [**Continuous deployment**]{.orange} of applications üöÄ
 -->

## Pipeline globale üõ†Ô∏è

![](../img/pipeline_donnees_sat.png){#fig-chain2 width=100% height=100%}

::: {.notes}
Voici la pipeline globale. Les √©tapes 2 et 3 ne sont faites que lors de l'entrainement du modele. Ayant un entra√Ænement qualitatif √† notre disposition, pour pr√©dire de nouvelles images, nous passons directement de l'√©tape 1 √† l'√©tape 4. Un exemple tr√®s parlant et r√©cent : le cyclone chido en une nuit -> pred

1. Standardisation de l'acquisition des donn√©es ‚Äî actuellement rudimentaire. Besoin d'images sans nuages, dat√©es pr√©cis√©ment, avec une m√©thodologie coh√©rente (challenge avec Pl√©iades).  
2. Phase d'entra√Ænement : suppression des nuages, √©quilibrage du jeu de donn√©es, annotation, d√©coupage.  
3. PyTorch avec mod√®le pr√©-entra√Æn√© depuis HuggingFace (requiert GPU).  
4. Construction de l‚ÄôAPI : pr√©diction sur images, regroupement / bo√Ætes englobantes, calculs statistiques (surface b√¢tie).  
5. D√©ploiement via GeoServer et application web.  
6. R√©sultats utilis√©s par les coll√®gues de l‚ÄôINSEE pour analyses statistiques.  

:::

## Application Architecture üß©

![](../img/app-architecture.png){fig-align="center" width=100%}

::: {.notes}
Merci √† Onyxia d'avoir rendu ce projet possible en mode DevOps

Un point notable est que nous utilisons un Geoserver pour permettre un affichage dynamique de nos images satellites sur la webapp, rendu possible grace aux calculs effectu√©s en interne pour fluidifier l'affichage de zones sp√©cifiques.

Cette architecture √©tant tr√®s technique, je ne vais pas m'attarder longtemps dessus, on pourra y revenir s'il y a des questions. M√™me si √ßa semble √™tre la force de ce projet, c'est √©galement une grande limite.

1. [**Acquisition des donn√©es**]{.orange} :  
    - Imagerie Pl√©iades fournie par un prestataire national  
    - Stockage sur infrastructure cloud  

2. [**Pr√©paration des donn√©es**]{.orange} :  
    - Pr√©traitement des images (filtrage des nuages, normalisation)  
    - Annotation automatis√©e √† partir des donn√©es de b√¢timents de r√©f√©rence  
    - D√©coupage des images (tuiles de 125 m √ó 125 m)  

3. [**D√©veloppement du mod√®le**]{.orange} :  
    - Impl√©mentation deep learning (PyTorch)  
    - Entra√Ænement avec GPU  
    - Versionnage du mod√®le (MLFlow)  

4. [**Syst√®me de production**]{.orange} :  
    - API REST pour l‚Äôinf√©rence  
    - D√©ploiement containeris√©  
    - Capacit√©s de traitement parall√®le  

5. [**Distribution des r√©sultats**]{.orange} :  
    - GeoServer permet de visualiser dynamiquement les images satellite gr√¢ce √† des calculs qu'il effectue en amont, de sorte √† ce que l'application web soit rapide  
    - Application web pour la visualisation  
    - Outils d‚Äôanalyse statistique  

:::