---
format:
  html:
    header-includes: |
        <link rel="icon" type="image/png" sizes="32x32" href="../_extensions/InseeFrLab/onyxia/favicon-32x32.png">
---

# üì¶ Structure du projet

Ce projet structur√© en **8 d√©p√¥ts Git** open source, h√©berg√©s sur GitHub, et organis√©s au sein de l‚Äô√©quipe [Satellite images](https://github.com/orgs/InseeFrLab/teams/satellite-images) de l‚Äôorganisation *InseeFrLab*.

## üìÅ Les diff√©rents d√©p√¥ts

### 1Ô∏è‚É£ Astrovision : Package utilitaire pour le traitement d‚Äôimages satellites

Pour manipuler des donn√©es g√©ospatiales, la biblioth√®que incontournable est [GDAL](https://gdal.org/en/stable/). Afin de faciliter son usage en Python, des wrappers comme [Rasterio](https://rasterio.readthedocs.io/en/stable/intro.html) sont couramment utilis√©s. Rasterio offre une interface efficace pour travailler avec des donn√©es *raster*.

Dans notre projet, nous avons d√©velopp√© un package compl√©mentaire, [Astrovision](https://github.com/InseeFrLab/astrovision), qui centralise un ensemble de fonctions utilitaires : d√©coupage d‚Äôimages, gestion des m√©tadonn√©es, visualisation, etc. Ce package n‚Äôest pas strictement indispensable, cela a √©t√© aussi pour nous d'apprendre √† d√©ployer un package python. Le projet pourrait fonctionner en s‚Äôappuyant exclusivement sur Rasterio, avec quelques adaptations.

---

### 2Ô∏è‚É£ Pr√©paration des images satellites

Le d√©p√¥t [satellite-images-preprocess](https://github.com/InseeFrLab/satellite-images-preprocess) regroupe les fonctions n√©cessaires √† la pr√©paration des images avant l'entra√Ænement des mod√®les. Ce d√©p√¥t n‚Äôest utilis√© **qu‚Äôen amont d'un entra√Ænement**, et n'est donc pas utile lorsque l'on souhaite simplement r√©aliser de l'inf√©rence sur de nouvelles images.

Le *pipeline* de preprocessing comprend les √©tapes suivantes :

1. G√©n√©ration automatique des *labels* √† partir d‚Äôun jeu d‚Äôannotations.
2. D√©coupage des images sources en tuiles plus petites (pour √©viter les probl√®mes de m√©moire lors de l'entra√Ænement).
3. Suppression des images contenant des nuages.
4. Filtrage des images selon une r√©gion d‚Äôint√©r√™t d√©finie.
5. Calcul des moyennes et √©carts types des bandes spectrales pour la normalisation.
6. R√©alisation du split *train/test* et sauvegarde des donn√©es sur un bucket S3.

::: {.callout-note}
Le choix de s√©parer ce d√©p√¥t de celui de l'entra√Ænement est discutable, mais repose sur plusieurs objectifs :
- Isoler les diff√©rentes √©tapes du pipeline.
- √âviter de r√©-ex√©cuter inutilement le preprocessing √† chaque entra√Ænement.
- Faciliter la modularit√© du projet.
Ces objectifs ne sont pas forc√©ment en contradiction avec le fait de tout centraliser dans un seul package.
:::

---

### 3Ô∏è‚É£ Entra√Ænement des mod√®les

L'entra√Ænement est g√©r√© par le d√©p√¥t [satellite-images-train](https://github.com/InseeFrLab/satellite-images-train). Il est n√©cessaire d'avoir √† disposition des images d√©j√† pr√©trait√©es et stock√©es sur le S3, ce qui peut √™tre fait via le d√©p√¥t de preprocessing.

L‚Äôobjectif de ce d√©p√¥t est d‚Äôoffrir un environnement modulaire permettant d‚Äôexp√©rimenter diff√©rentes strat√©gies d‚Äôentra√Ænement et d‚Äôoptimiser les hyperparam√®tres propre √† l'entra√Ænement (et rien d'autres !). Tous les r√©sultats sont loggu√©s via **MLflow**.

Deux familles de mod√®les de segmentation sont actuellement int√©gr√©es :

- [DeepLabv3](https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101/) (et sa variante binaire).
- [Segformer](https://github.com/NVlabs/SegFormer), de **b0 √† b5**.

C√¥t√© fonctions de perte, plusieurs variantes de l'entropie crois√©e sont disponibles (classique, pond√©r√©e, binaire, etc.).

---

### 4Ô∏è‚É£ Inf√©rence √† partir de nouvelles images

Le d√©p√¥t [satellite-images-inference](https://github.com/InseeFrLab/satellite-images-inference) est d√©di√© √† l‚Äôinf√©rence. C'est peut √™tre le d√©p√¥t le moins "isol√©" dans le sens o√π il contient √† la fois les codes de l'API qui est utilis√©e pour r√©aliser l'inf√©rence mais √©galement divers scripts n√©cessaires que cela soit pour l'inf√©rence, le post-processing ou bien la reception de nouvelles images √† inf√©rer.

L‚Äô**API**, d√©velopp√©e avec **FastAPI**, est d√©ploy√©e sur **SSPCloud**. Elle propose trois *endpoints* principaux :

1. `GET /predict_image` ‚Äî Pr√©diction d‚Äôune image individuelle stock√©e sur S3.
2. `GET /predict_cluster` ‚Äî Pr√©diction sur un √Ælot identifi√© par son code (peut inclure plusieurs images).
3. `GET /predict_bbox` ‚Äî Pr√©diction sur une *bounding box* d√©finie par des coordonn√©es GPS (peut inclure plusieurs images).

Un syst√®me de **cache** est en place pour √©viter les redondances de calcul sur une m√™me image.


::: {.callout-important}
# ‚ö†Ô∏è **Limites actuelles de l‚ÄôAPI :**

- Les pr√©dictions en batch ne sont pas possibles directement (elles doivent √™tre s√©quentielles) puisque seuls des *endpoints* `GET` sont disponibles.
- Certaines op√©rations pourraient √™tre asynchrones pour am√©liorer les performances.
:::



### 5Ô∏è‚É£ Application web

https://github.com/InseeFrLab/satellite-images-webapp

### 6Ô∏è‚É£ D√©ploiement des applications

https://github.com/InseeFrLab/satellite-images-cd

### Documentation du projet

https://github.com/InseeFrLab/satellite-images-docs


### (Optionnel) D√©p√¥t cr√©ation image -- Deprecated

Cr√©er une image docker avec les bons requirements
https://github.com/InseeFrLab/satellite-images-dev


## Le projet sur le Datalab

### Le namespace

projet slums detection

### Les donn√©es

data-raw
data-label
data-preprocessed
data-predictions
data-roi
data-clusters
cache-predictions


### Les services

Mlflow, Argo CD, Argo workflows, Geoserver









