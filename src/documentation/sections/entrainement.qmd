# Entra√Ænement d'un mod√®le 

Lien vers le d√©p√¥t d'entraiement : [https://github.com/InseeFrLab/satellite-images-train]().

## üöÄ D√©marrage rapide

### 1. Cloner et configurer l'environnement

```bash
git clone https://github.com/InseeFrLab/satellite-images-train.git
cd satellite-images-train
uv sync
uv run pre-commit install
```

### 2. Lancer en local

D√©finissez les param√®tres d'entra√Ænement puis ex√©cutez :

```bash
bash bash/mlflow-run.sh
```

L'ensemble de l'ex√©cution sera automatiquement enregistr√© dans MLflow.


### 3. Lancer avec Argo Workflows ‚òÅÔ∏è

1. Mettez √† jour les param√®tres dans argo-workflows/train-workflow.yaml `argo-workflows/train-workflow.yaml`.
2. Soumettez le workflow via l'interface CLI ou l'interface graphique Argo en copier/collant le template:

```bash
argo submit argo-workflows/train-workflow.yaml
```

## üß† Configuration du mod√®le

Le pipeline d'entra√Ænement est construit avec PyTorch et con√ßu pour √™tre flexible :

- **Architectures** : `deeplabv3`, `segformer-b[0‚Äì5]`, `single_class_deeplabv3`
- **Fonctions de perte**: Cross-Entropy (avec diff√©rentes variantes), BCE, BCE avec logits
- **Schedulers**: `reduce_on_plateau`, `one_cycle`, etc.
- **Sources des labels**: `BDTOPO`, `COSIA` ou autres.

De nouveaux mod√®les peuvent √™tre impl√©menter en rajoutant le code dans `src/models/components/segmentation_models.py`.
Les fonctions de perte sont d√©finies dans `src/config/loss.py` et les schedulers dans `src/config/scheduling.py`.
En ce qui concerne les annotations, cela se joue dans le [d√©pot de preprocessing](https://github.com/InseeFrLab/satellite-images-preprocess)


## üìà L'utilisation de MLflow 

Le script `src/train.py` int√®gre d√©j√† MLflow, et chaque exp√©rimentation est automatiquement enregistr√©e et visualisable via l‚Äô[interface graphique MLflow](https://projet-slums-detection-mlflow.user.lab.sspcloud.fr/).

Lors de l'ex√©cution d'une exp√©rimentation, assurez-vous que la variable d'environnement `MLFLOW_TRACKING_URI` est correctement d√©finie afin que les logs soient stock√©s au bon endroit. Gr√¢ce √† `mlflow.pytorch.autolog()`, les principaux √©l√©ments (param√®tres, m√©triques, artefacts, etc.) sont logu√©s automatiquement. Si besoin, vous pouvez d√©sactiver l'autologging pour enregistrer manuellement uniquement les informations jug√©es essentielles.

Une fois vos exp√©rimentations r√©alis√©es, vous pouvez les comparer facilement en les s√©lectionnant dans l‚Äôinterface puis en cliquant sur `Compare`. MLflow vous permet alors d'analyser visuellement les m√©triques obtenues en fonction des hyperparam√®tres utilis√©s.



::: {.callout-tip}
# Comment passer un mod√®le en production ?

1. Une fois que vous avez une exp√©rimentation qui vous satisfait, il va falloir l'enregistrer dans le Model Registry.
2. Pour cela, cliquez sur le nom du run de l'exp√©rimentation en question. Cela doit ouvrir une nouvelle fen√™tre et vous devez vous trouver dans l'onglet `Overview`. 
3. Cliquez ensuite sur l'onglet `Artifacts`.
4. Pour enregistrer le mod√®le associ√© √† l'exp√©rimentation, cliquez sur `Register model`.
5. Vous avez ensuite le choix entre les mod√®les `Segmentation` et `Segmentation-multiclass`, prenez le plus ad√©quat ou alors vous pouvez en cr√©er un nouveau.
6. Si besoin, rajoutez un tag et un alias √† votre mod√®le. L'alias peut, au m√™me titre que la version, √™tre utilis√© pour r√©cup√©r√© le mod√®le du Model Registry.
7. Allez sur le [d√©p√¥t GitOps](https://github.com/InseeFrLab/satellite-images-cd) ou clonez le.
8. Modifiez les lignes correspondantes avec le bon nom et version de votre mod√®le √† passer en production. Faites un commit.
9. Allez sur [ArgoCD](https://projet-slums-detection-argo-cd.user.lab.sspcloud.fr/), et v√©rifiez que votre application `satellite-images-api` s'est bien mise √† jour. Sinon, appuyer sur `Refresh`.
:::


::: {.callout-note}
# Comment passer un mod√®le en production ?

En plus des aspects purement m√©thodologique plusieurs points technique pourraient √™tre impl√©ment√©s/am√©lior√©s :

- signature du modele MLFlow 
- changer le CLI pour parser les listes de mani√®re conventionnelle
- Jouer avec args et kwargs pour √©viter d'avoir une fonction avec autant de param√®tre

:::




## üìà Utilisation de MLflow

Le script `src/train.py` int√®gre d√©j√† MLflow, et chaque exp√©rimentation est automatiquement enregistr√©e et visualisable via l‚Äô[interface graphique MLflow](https://projet-slums-detection-mlflow.user.lab.sspcloud.fr/).

Lors de l'ex√©cution d'une exp√©rimentation, assurez-vous que la variable d'environnement `MLFLOW_TRACKING_URI` est correctement d√©finie afin que les logs soient stock√©s au bon endroit. Gr√¢ce √† `mlflow.pytorch.autolog()`, les principaux √©l√©ments (param√®tres, m√©triques, artefacts, etc.) sont logu√©s automatiquement. Si besoin, vous pouvez d√©sactiver l'autologging pour enregistrer manuellement uniquement les informations jug√©es essentielles.

Une fois vos exp√©rimentations r√©alis√©es, vous pouvez les comparer facilement en les s√©lectionnant dans l‚Äôinterface puis en cliquant sur `Compare`. MLflow vous permet alors d'analyser visuellement les m√©triques obtenues en fonction des hyperparam√®tres utilis√©s.

---

::: {.callout-tip}
## üîÅ Promotion d‚Äôun mod√®le vers la production

Voici la proc√©dure pour enregistrer un mod√®le performant dans le **Model Registry**, puis le d√©ployer :

1. Identifiez une exp√©rimentation satisfaisante, puis cliquez sur le nom du run associ√© pour acc√©der √† ses d√©tails.
2. Dans l‚Äôonglet `Overview`, basculez vers `Artifacts`.
3. Cliquez sur `Register model` pour enregistrer le mod√®le.
4. Choisissez le registre appropri√© (`Segmentation` ou `Segmentation-multiclass`) ou cr√©ez un nouveau registre si n√©cessaire.
5. Ajoutez un tag et/ou un alias pour votre mod√®le. L‚Äôalias peut √™tre utilis√©, comme la version, pour charger le mod√®le depuis le Model Registry.
6. Rendez-vous sur le [d√©p√¥t GitOps](https://github.com/InseeFrLab/satellite-images-cd) (ou clonez-le si ce n‚Äôest pas d√©j√† fait).
7. Modifiez les lignes appropri√©es pour indiquer le nom et la version du mod√®le √† d√©ployer, puis effectuez un commit.
8. Connectez-vous √† [ArgoCD](https://projet-slums-detection-argo-cd.user.lab.sspcloud.fr/) et v√©rifiez que l‚Äôapplication `satellite-images-api` a bien √©t√© mise √† jour. Le cas √©ch√©ant, cliquez sur `Refresh`.

:::

---

::: {.callout-note}
## üõ†Ô∏è Am√©liorations techniques possibles

En compl√©ment de l‚Äôapproche m√©thodologique, plusieurs axes d‚Äôam√©lioration technique sont envisageables :

- **Signature du mod√®le MLflow** : Permet de formaliser les entr√©es/sorties attendues pour fiabiliser le d√©ploiement.
- **Am√©lioration du CLI** : Adapter le parsing des listes pour respecter les conventions (par exemple via `argparse` ou `click`).
- **Utilisation d‚Äô`*args` et `**kwargs`** : R√©duire la complexit√© des fonctions avec de nombreux param√®tres et am√©liorer leur r√©utilisabilit√©.

:::

---

Souhaites-tu que je reformule √©galement d'autres parties de la documentation ?