# Inf√©rence du mod√®le et mise √† disposition des r√©sultats

## L'API d'inf√©rence

L‚ÄôAPI, d√©velopp√©e avec FastAPI, est d√©ploy√©e sur SSPCloud √† l'adresse suivante : [https://satellite-images-inference.lab.sspcloud.fr/](). Elle propose trois *endpoints* :

1. `GET /predict_image` ‚Äî Pr√©diction d‚Äôune image individuelle stock√©e sur S3.
2. `GET /predict_cluster` ‚Äî Pr√©diction sur un √Ælot identifi√© par son code (peut inclure plusieurs images).
3. `GET /predict_bbox` ‚Äî Pr√©diction sur une *bounding box* d√©finie par des coordonn√©es GPS (peut inclure plusieurs images).

Le code associ√© √† l'API est accessible via le [d√©p√¥t d'inf√©rence](https://github.com/InseeFrLab/satellite-images-inference) dans le dossier `api/`.

Un syst√®me de **cache** est en place pour √©viter les redondances de calcul sur une m√™me image.


::: {.callout-important}
# ‚ö†Ô∏è **Limites actuelles de l‚ÄôAPI :**

- Les pr√©dictions en batch ne sont pas possibles directement (elles doivent √™tre s√©quentielles) puisque seuls des *endpoints* `GET` sont disponibles.
- Certaines op√©rations pourraient √™tre asynchrones pour am√©liorer les performances.
- L'API reproduit le preprocessing, id√©alement, il faudrait `wrapper` tout dans un mod√®le MLFlow et donc cr√©er une custom class lors de l'entrainement.
:::

::: {.callout-note}
# Comment faire une mont√©e de version de l'API

1. Vous d√©veloppez vos nouvelles fonctionnalit√©s dans le code de l'api (dossier `api/` du d√©p√¥t d'inf√©rence).
2. Une fois que vous √™tes satisfaits de votre code et que vous l'avez test√© localement, vous pouvez cr√©er un tag avec la bonne version (e.g `vX.X.X`) et *push* le tag vers Github.
3. Une fois le tag *pushed*, cela va d√©clencher une *Action* sur Github qui va construire une nouvelle image avec votre nouvelle API, en lui associant le tag que vous avez d√©fini.
4. Allez sur le d√©pot [GitOps](https://github.com/InseeFrLab/satellite-images-cd) et modifiez le manifeste kubernetes de d√©ploiement de l'API. Notamment, changez la version de l'image √† utiliser.
5. ArgoCD, qui scanne le d√©p√¥t GitOps va automatiquement d√©tecter le changement et d√©ploier la nouvelle version de l'API. Si vous √™tes press√©s, vous pouvez cliquer sur "Refresh" pour forcer ArgoCD √† scanner le d√©p√¥t GitOps imm√©diatement.
:::

## R√©aliser des pr√©dictions sur des images

### √âtape 1 : R√©cup√©ration des images

Afin de r√©aliser des pr√©dictions sur des images, il est n√©cessaire de les stocker d'une mani√®re structur√©e dans le S3 du projet sur le SSPCloud. En effet, l'API pour r√©aliser la pr√©diction d'une image il va directement la chercher sur le S3, ce qu'on lui donne n'est que le chemin pour y acc√©der.

## üåç Geoserver

Une fois les pr√©dictions faites, il est important de les int√©grer au [Geoserver](https://geoserver-satellite-images.lab.sspcloud.fr/geoserver) *(demander les identifiants √† l'√©quipe)*.



### üì• √âtape 1 : Envoi vers le pvc du GeoServer via ArgoWorkflow

Un remplissage dans le pvc du GeoServer se fait directement lors de l‚Äô[inf√©rence via le template ArgoWorkflow](https://github.com/InseeFrLab/satellite-images-inference/blob/9c9ef808fdce7ecea29a568e04c41354258c3c61/argo-workflows/predict-workflows.yaml#L86).  
Cette √©tape consiste √† stocker les images Pl√©iades **et** les pr√©dictions dans le GeoServer.



### üóÇÔ∏è √âtape 2 : Cr√©ation manuelle des entrep√¥ts et couches dans le GeoServer

Il est important de cr√©er un entrep√¥t et une couche pour utiliser les donn√©es sous forme de flux WMS dans la webapp.
Pour l‚Äôinstant, **cette √©tape est manuelle** : nous n‚Äôavons pas trouv√© de m√©thode automatique.



### üì∑ Pour les *Images*

1. **Entrep√¥t**  
   - Menu **Donn√©es > Entrep√¥ts** (√† gauche)  
   - Cliquez sur **+ Ajouter un nouvel entrep√¥t**  
   - Choisir **ImageMosaic**  
   - `name = <DEP>_<YEAR>`  
   - Parcourir le dossier `PLEIADES/<DEP>/<YEAR>`  
   - ‚û°Ô∏è *Sauvegarder*

2. **Couche**  
   - Menu **Donn√©es > Couches**  
   - Cliquez sur **+ Ajouter une nouvelle couche**  
   - S√©lectionner l‚Äôentrep√¥t cr√©√©  
   - `name = <DEP>_<YEAR>`, `title = <YEAR>`  
   - ‚û°Ô∏è *Sauvegarder*



### üß† Pour les *Pr√©dictions*

1. **Entrep√¥t**  
   - Menu **Donn√©es > Entrep√¥ts**  
   - Cliquez sur **+ Ajouter un nouvel entrep√¥t**  
   - Choisir **Geopackage**  
   - `name = <DEP>_PREDICTIONS_<YEAR>`  
   - Parcourir le fichier :  
     `PREDICTIONS/PLEIADES/<DEP>/<YEAR>/Segmentation-multiclasse/1/predictions.gpkg`  
   - ‚û°Ô∏è *Sauvegarder*

2. **Couche**  
   - Menu **Donn√©es > Couches**  
   - Cliquez sur **+ Ajouter une nouvelle couche**  
   - S√©lectionner l‚Äôentrep√¥t cr√©√©  
   - `name = <DEP>_PREDICTIONS_<YEAR>`, `title = <DEP>_PREDICTIONS_<YEAR>`  
   - Dans l‚Äôonglet **Emprises** :  
     - Cliquer sur **Bas√©es sur les donn√©es**, puis **Calculer depuis les emprises natives**  
   - Dans **Publication > Style par d√©faut** : `dirag:style_multiclass`  
   - ‚û°Ô∏è *Sauvegarder*



‚ö†Ô∏è **V√©rification**  
Pour v√©rifier que tout s'est bien pass√© :  
Menu **Pr√©visualisation de la couche** (√† gauche) ‚Üí Cliquer sur **OpenLayers** de la couche souhait√©e pour la pr√©visualiser.



## üß© Webapp CRaTT

Une fois les nouvelles couches cr√©√©es, il faut les int√©grer dans la webapp CRaTT :  

1. Cloner le [d√©p√¥t Git](https://github.com/InseeFrLab/satellite-images-webapp.git)  
2. Modifier le code pour ajouter le nouveau **couple D√©partement / Ann√©e** :  
   - Dans [`components/config.js`](https://github.com/InseeFrLab/satellite-images-webapp/blob/main/src/components/config.js)  
   - Et dans [`utils/config.js`](https://github.com/InseeFrLab/satellite-images-webapp/blob/main/src/utils/config.js)  

üí° Le `git push` d√©clenche automatiquement un rebuild du site. Les nouvelles couches seront visibles apr√®s quelques minutes (une fois que l‚Äôaction GitHub est termin√©e).


