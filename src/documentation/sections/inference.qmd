# Inf√©rence du mod√®le et mise √† disposition des r√©sultats

## ‚öôÔ∏è L'API d'inf√©rence

L‚ÄôAPI, d√©velopp√©e avec FastAPI, est d√©ploy√©e sur SSPCloud √† l'adresse suivante : [https://satellite-images-inference.lab.sspcloud.fr/](). Elle propose trois *endpoints* :

1. `GET /predict_image` ‚Äî Pr√©diction d‚Äôune image individuelle stock√©e sur S3.
2. `GET /predict_cluster` ‚Äî Pr√©diction sur un √Ælot identifi√© par son code (peut inclure plusieurs images).
3. `GET /predict_bbox` ‚Äî Pr√©diction sur une *bounding box* d√©finie par des coordonn√©es GPS (peut inclure plusieurs images).

Le code associ√© √† l'API est accessible via le [d√©p√¥t d'inf√©rence](https://github.com/InseeFrLab/satellite-images-inference) dans le dossier `api/`.

Un syst√®me de **cache** est en place pour √©viter les redondances de calcul sur une m√™me image.


::: {.callout-important}
# ‚ö†Ô∏è **Limites actuelles de l‚ÄôAPI :**

- Les pr√©dictions en batch ne sont pas possibles directement (elles doivent √™tre s√©quentielles) puisque seuls des *endpoints* `GET` sont disponibles.
- Certaines op√©rations pourraient √™tre asynchrones pour am√©liorer les performances.
- L'API reproduit le preprocessing, id√©alement, il faudrait `wrapper` tout dans un mod√®le MLFlow et donc cr√©er une custom class lors de l'entra√Ænement.
- C'est pas un probl√®me de l'API en tant que tel mais comment on fait les appels via `make_predictions_from_api.py`, il faudrait forcer l'arr√™t des requ√™tes quand il y a eu une d√©connexion c√¥t√© client (Timeout/KeyboardInterrupt etc.).
- Id√©alement il faudrait r√©duire la taille de l'image. Elle contient toutes les lib cuda alors qu'on fait l'inf√©rence sur CPU.
:::

::: {.callout-note}
# Comment faire une mont√©e de version de l'API

1. Vous d√©veloppez vos nouvelles fonctionnalit√©s dans le code de l'api (dossier `api/` du d√©p√¥t d'inf√©rence).
2. Une fois que vous √™tes satisfaits de votre code et que vous l'avez test√© localement, vous pouvez cr√©er un tag avec la bonne version (e.g `vX.X.X`) et *push* le tag vers Github.
3. Une fois le tag *pushed*, cela va d√©clencher une *Action* sur Github qui va construire une nouvelle image avec votre nouvelle API, en lui associant le tag que vous avez d√©fini.
4. Allez sur le d√©pot [GitOps](https://github.com/InseeFrLab/satellite-images-cd) et modifiez le manifeste kubernetes de d√©ploiement de l'API. Notamment, changez la version de l'image √† utiliser.
5. ArgoCD, qui scanne le d√©p√¥t GitOps va automatiquement d√©tecter le changement et d√©ploier la nouvelle version de l'API. Si vous √™tes press√©s, vous pouvez cliquer sur "Refresh" pour forcer ArgoCD √† scanner le d√©p√¥t GitOps imm√©diatement.
:::

## üñºÔ∏è R√©aliser des pr√©dictions sur des images

### √âtape 1 : R√©cup√©ration des images

Afin de r√©aliser des pr√©dictions sur des images, il est n√©cessaire de les stocker d'une mani√®re structur√©e dans le S3 du projet sur le SSPCloud. En effet, l'API pour r√©aliser la pr√©diction d'une image il va directement la chercher sur le S3, ce qu'on lui donne n'est que le **chemin pour y acc√©der**. Pour savoir comment r√©cup√©rer et stocker de nouvelles images, veuillez vous r√©f√©rer √† la [Section Acquisition](acquisition.html).

### √âtape 2 : Mettre √† jour le fichier `filename-to-polygons.parquet`

Afin d'obtenir rapidement une image concernant une zone g√©ographique sp√©cifique nous avons cr√©√© un fichier qui indexe les fichiers `.tif` √† une certaine g√©om√©trie. Ainsi, sans ouvrir l'image en question, il nous est possible de d√©terminer qu'elle zone elle couvre. Ce fichier est utilis√© des lors que l'on souhaite utiliser les endpoints `/predict_cluster` et `/predict_bbox`.
Pour mettre √† jour ce fichier qui est un parquet partitionn√© par le d√©partement et l'ann√©e il suffit d'ex√©cuter le script [build_filename_to_polygons.py](https://github.com/InseeFrLab/satellite-images-inference/blob/main/src/build_filename_to_polygons.py). Ce script va d√©tecter toutes les images qui ne sont pas encore index√©e dans le fichier `filename-to-polygons.parquet`, les ouvrir toutes une √† une pour d√©terminer leur *bounding box* et enregistrer le fichier √† jour.

### √âtape 3 : Faire l'inf√©rence sur un lot d'image

Pour pr√©dire la couverture du sol sur un √©chantillon d'images il est n√©cessaire d'utiliser l'endpoint `/predict_image`. Le script [make_predictions_from_api.py](https://github.com/InseeFrLab/satellite-images-inference/blob/main/src/make_predictions_from_api.py) permet de r√©aliser les pr√©dictions pour le mill√©sime d'un d√©partement donn√©. Il r√©alise de mani√®re asynchrone des appels √† l'API.

::: {.callout-tip}

Lorsque vous lancez une pr√©diction sur un grand nombre d'image, il est conseill√© d'augmenter le nombre de *replicas* de l'API afin de r√©duire sensiblement le temps de calcul. Notez √©galement que l'API n'impl√©mente pas pour le moment de pr√©diction par batch , ce qui pourrait √©galement am√©liorer consid√©rablement les temps de calcul (sous r√©serve de la m√©moire disponible)
:::

Il est recommand√© de r√©aliser les pr√©dictions √† l'aide d'Argo Workflow en utilisant le template [predict-workflows.yaml](predict-workflows.yaml). Celui-ci, en plus de r√©aliser les pr√©dictions, va directemment transf√©rer les images et les pr√©dictions dans le PVC du Geoserver afin de les mettre √† disposition.

## üåç Geoserver

Une fois les pr√©dictions faites, il est important de les int√©grer au [Geoserver](https://geoserver-satellite-images.lab.sspcloud.fr/geoserver) *(demander les identifiants √† l'√©quipe)*.


### üì• √âtape 1 : Envoi vers le pvc du GeoServer via ArgoWorkflow

Un remplissage dans le pvc du GeoServer se fait directement lors de l‚Äô[inf√©rence via le template ArgoWorkflow](https://github.com/InseeFrLab/satellite-images-inference/blob/main/argo-workflows/predict-workflows.yaml#L88).  
Cette √©tape consiste √† stocker les images Pl√©iades **et** les pr√©dictions dans le GeoServer.



### üóÇÔ∏è √âtape 2 : Cr√©ation manuelle des entrep√¥ts et couches dans le GeoServer

Il est important de cr√©er un entrep√¥t et une couche pour utiliser les donn√©es sous forme de flux WMS dans la webapp.
Pour l‚Äôinstant, **cette √©tape est manuelle** : nous n‚Äôavons pas trouv√© de m√©thode automatique.



### üì∑ Pour les *Images*

1. **Entrep√¥t**  
   - Menu **Donn√©es > Entrep√¥ts** (√† gauche)  
   - Cliquez sur **+ Ajouter un nouvel entrep√¥t**  
   - Choisir **ImageMosaic**  
   - `name = <DEP>_<YEAR>`  
   - Parcourir le dossier `PLEIADES/<DEP>/<YEAR>`  
   - ‚û°Ô∏è *Sauvegarder*

2. **Couche**  
   - Menu **Donn√©es > Couches**  
   - Cliquez sur **+ Ajouter une nouvelle couche**  
   - S√©lectionner l‚Äôentrep√¥t cr√©√©  
   - `name = <DEP>_<YEAR>`, `title = <YEAR>`  
   - ‚û°Ô∏è *Sauvegarder*



### üß† Pour les *Pr√©dictions*

1. **Entrep√¥t**  
   - Menu **Donn√©es > Entrep√¥ts**  
   - Cliquez sur **+ Ajouter un nouvel entrep√¥t**  
   - Choisir **Geopackage**  
   - `name = <DEP>_PREDICTIONS_<YEAR>`  
   - Parcourir le fichier :  
     `PREDICTIONS/PLEIADES/<DEP>/<YEAR>/Segmentation-multiclasse/1/predictions.gpkg`  
   - ‚û°Ô∏è *Sauvegarder*

2. **Couche**  
   - Menu **Donn√©es > Couches**  
   - Cliquez sur **+ Ajouter une nouvelle couche**  
   - S√©lectionner l‚Äôentrep√¥t cr√©√©  
   - `name = <DEP>_PREDICTIONS_<YEAR>`, `title = <DEP>_PREDICTIONS_<YEAR>`  
   - Dans l‚Äôonglet **Emprises** :  
     - Cliquer sur **Bas√©es sur les donn√©es**, puis **Calculer depuis les emprises natives**  
   - Dans **Publication > Style par d√©faut** : `dirag:style_multiclass`  
   - ‚û°Ô∏è *Sauvegarder*



‚ö†Ô∏è **V√©rification**  
Pour v√©rifier que tout s'est bien pass√© :  
Menu **Pr√©visualisation de la couche** (√† gauche) ‚Üí Cliquer sur **OpenLayers** de la couche souhait√©e pour la pr√©visualiser.



## üíª Webapp CRaTT

Une fois les nouvelles couches cr√©√©es, il faut les int√©grer dans la webapp CRaTT :  

1. Cloner le [d√©p√¥t Git](https://github.com/InseeFrLab/satellite-images-webapp.git)  
2. Modifier le code pour ajouter le nouveau **couple D√©partement / Ann√©e** :  
   - Dans [`components/config.js`](https://github.com/InseeFrLab/satellite-images-webapp/blob/main/src/components/config.js)  
   - Et dans [`utils/config.js`](https://github.com/InseeFrLab/satellite-images-webapp/blob/main/src/utils/config.js)  

üí° Le `git push` d√©clenche automatiquement un rebuild du site. Les nouvelles couches seront visibles apr√®s quelques minutes (une fois que l‚Äôaction GitHub est termin√©e).
